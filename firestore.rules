rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidRecipe() {
      let data = request.resource.data;
      return data.title is string &&
             data.title.size() >= 3 &&
             data.title.size() <= 200 &&
             data.status in ['draft', 'published'] &&
             (!('ingredients' in data) || data.ingredients is list) &&
             (!('steps' in data) || data.steps is list) &&
             (!('prep_time' in data) || (data.prep_time is number && data.prep_time >= 0 && data.prep_time <= 1440)) &&
             (!('cook_time' in data) || (data.cook_time is number && data.cook_time >= 0 && data.cook_time <= 1440)) &&
             (!('servings' in data) || (data.servings is number && data.servings >= 1 && data.servings <= 100));
    }
    
    function isValidComment() {
      let data = request.resource.data;
      return data.author is string &&
             data.author.size() > 0 &&
             data.author.size() <= 100 &&
             data.content is string &&
             data.content.size() > 0 &&
             data.content.size() <= 1000 &&
             (!('email' in data) || data.email == '' || isValidEmail(data.email)) &&
             data.created_at == request.time;
    }
    
    // Admin users collection - only admins can read/write
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if false; // Users should be created through Admin SDK
      allow update: if isOwner(userId) && request.resource.data.role == resource.data.role; // Can't change own role
      allow delete: if isAdmin() && !isOwner(userId); // Can't delete self
    }
    
    // Recipes collection
    match /recipes/{recipeId} {
      // Anyone can read published recipes
      allow read: if resource.data.status == 'published' || isAdmin();
      
      // Only admins can create/update/delete
      allow create: if isAdmin() && isValidRecipe();
      allow update: if isAdmin() && isValidRecipe();
      allow delete: if isAdmin();
      
      // Comments subcollection
      match /comments/{commentId} {
        // Anyone can read approved comments, admins can read all
        allow read: if resource.data.status == 'approved' || isAdmin();
        
        // Anyone can create comments (with auto-approval)
        allow create: if isValidComment() &&
                        request.resource.data.status == 'approved';
        
        // Only admins can update/delete
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }
    }
    
    // Settings collection (includes about page)
    match /settings/{document} {
      // Anyone can read settings
      allow read: if true;
      
      // Only admins can write
      allow write: if isAdmin();
    }
    
    // Newsletter subscribers
    match /newsletter_subscribers/{subscriberId} {
      // Only allow creation with valid email
      allow create: if isValidEmail(request.resource.data.email) &&
                      request.resource.data.active == true &&
                      request.resource.data.subscribed_at == request.time &&
                      request.resource.data.keys().hasAll(['email', 'active', 'subscribed_at']) &&
                      request.resource.data.keys().size() == 3;
      
      // Only admins can read
      allow read: if isAdmin();
      
      // Allow users to update their own subscription by email (unsubscribe)
      allow update: if resource.data.email == request.resource.data.email &&
                      request.resource.data.keys().hasAll(['active']) &&
                      request.resource.data.active == false;
      
      // Only admins can delete
      allow delete: if isAdmin();
    }
    
    // Media/uploads metadata
    match /media/{mediaId} {
      // Anyone can read media metadata
      allow read: if true;
      
      // Only admins can upload
      allow create: if isAdmin() &&
                      request.resource.data.size <= 5 * 1024 * 1024 &&
                      request.resource.data.contentType.matches('image/.*');
      
      // Only admins can update/delete
      allow update, delete: if isAdmin();
    }
    
    // Audit logs (recommended for security)
    match /audit_logs/{logId} {
      // Only admins can read logs
      allow read: if isAdmin();
      
      // Logs can only be created by authenticated users, never updated or deleted
      allow create: if isAuthenticated() &&
                      request.resource.data.timestamp == request.time &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['timestamp', 'userId', 'action', 'details']);
      allow update, delete: if false;
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}